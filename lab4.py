
import os
import logging
import asyncio
from contextlib import suppress
from typing import Dict, Optional

import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self) -> None:
        self.API_TOKEN = self._get_env_var("TELEGRAM_API_TOKEN")
        self.YANDEX_GPT_API_KEY = self._get_env_var("YANDEX_GPT_API_KEY")
        self.YANDEX_FOLDER_ID = self._get_env_var("YANDEX_FOLDER_ID")
        self.HYPERBOLIC_API_KEY = self._get_env_var("HYPERBOLIC_API_KEY")

    @staticmethod
    def _get_env_var(name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        value = os.getenv(name)
        if not value:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", name)
            exit(1)
        return value


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# FSM‚Äë—Å–æ—Å—Ç–æ—è–Ω–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Form(StatesGroup):
    profession = State()
    experience = State()
    goals = State()
    skills = State()
    preferences = State()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ë–∞–∑–æ–≤—ã–π HTTP‚Äë–∫–ª–∏–µ–Ω—Ç
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class APIClient:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è API‚Äë–∫–ª–∏–µ–Ω—Ç–æ–≤"""

    def __init__(self, timeout: int = 30) -> None:
        # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º‚Äë–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.client = httpx.AsyncClient(timeout=timeout)

    async def __aenter__(self):
        return self

    async def __aexit__(self, *args):
        await self.client.aclose()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# YandexGPT
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class YandexGPTClient(APIClient):
    BASE_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    def __init__(self, api_key: str, folder_id: str, timeout: int = 30) -> None:
        super().__init__(timeout)
        self.headers = {
            "Authorization": f"Api-Key {api_key}",
            "Content-Type": "application/json",
        }
        self.model_uri = f"gpt://{folder_id}/yandexgpt-lite"

    async def generate_roadmap(self, user_data: Dict[str, str]) -> Optional[str]:
        payload = {
            "modelUri": self.model_uri,
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 1500,
            },
            "messages": [
                {
                    "role": "system",
                    "text": "–¢—ã –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –°–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–æ–∞–¥–º–∞–ø.",
                },
                {"role": "user", "text": self._build_prompt(user_data)},
            ],
        }

        try:
            response = await self.client.post(
                self.BASE_URL, headers=self.headers, json=payload
            )
            response.raise_for_status()
            return response.json()["result"]["alternatives"][0]["message"]["text"]
        except Exception as exc:  # noqa: BLE001
            logger.error("YandexGPT Error: %s", exc, exc_info=True)
            return None

    @staticmethod
    def _build_prompt(data: Dict[str, str]) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–ª—é—á–∞–º"""
        return (
            f"–°–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ–∞–¥–º–∞–ø –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {data.get('profession', '-')}. "
            f"–£—á–∏—Ç—ã–≤–∞—è —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {data.get('experience', '-')}, "
            f"–∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏: {data.get('goals', '-')}, —Ç–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏: {data.get('skills', '-')}, "
            f"–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {data.get('preferences', '-')}. –í–∫–ª—é—á–∏:\n"
            "1. –ü–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è\n2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –æ–±—É—á–∞—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã\n"
            "3. –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è\n4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥—É\n"
            "5. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏"
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Hyperbolic (Llama‚Äë3.3‚Äë70B‚ÄëInstruct)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class HyperbolicClient(APIClient):
    BASE_URL = "https://api.hyperbolic.xyz/v1/chat/completions"

    def __init__(self, api_key: str, timeout: int = 30) -> None:
        super().__init__(timeout)
        self.headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}",
        }

    async def generate_analysis(self, prompt: str) -> Optional[str]:
        payload = {
            "messages": [{"role": "user", "content": prompt}],
            "model": "meta-llama/Llama-3.3-70B-Instruct",
            "max_tokens": 512,
            "temperature": 0.1,
            "top_p": 0.9,
        }
        try:
            response = await self.client.post(
                self.BASE_URL, headers=self.headers, json=payload
            )
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
        except Exception as exc:  # noqa: BLE001
            logger.error("Hyperbolic API Error: %s", exc, exc_info=True)
            return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class RoadmapGeneratorBot:
    """–ë–æ—Ç, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –æ–±–µ –º–æ–¥–µ–ª–∏"""

    # –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ State‚Äë–æ–±—ä–µ–∫—Ç—ã)
    _STATE_ORDER = [
        "profession",
        "experience",
        "goals",
        "skills",
        "preferences",
    ]

    _QUESTIONS = {
        "profession": "üìå –ù–∞–∑–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–∞–¥–º–∞–ø:",
        "experience": "üéØ –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞?\n(–Ω–∞—á–∏–Ω–∞—é—â–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª)",
        "goals": "üöÄ –ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –≥–æ–¥–∞?",
        "skills": "üí° –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        "preferences": "üåü –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?\n(—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∏–Ω–¥—É—Å—Ç—Ä–∏—è –∏ —Ç.–¥.)",
    }

    def __init__(self, config: Config) -> None:
        self.bot = Bot(token=config.API_TOKEN)
        self.dp = Dispatcher(self.bot, storage=MemoryStorage())
        self.yandex_client = YandexGPTClient(
            config.YANDEX_GPT_API_KEY, config.YANDEX_FOLDER_ID
        )
        self.hyperbolic_client = HyperbolicClient(config.HYPERBOLIC_API_KEY)

        # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
        self.dp.register_message_handler(self.start_command, commands=["start"], state="*")
        self.dp.register_message_handler(
            self.process_answer,
            state=[
                Form.profession,
                Form.experience,
                Form.goals,
                Form.skills,
                Form.preferences,
            ],
        )

    # ‚îÄ‚îÄ Handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
    async def start_command(self, message: types.Message):
        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CareerRoadmapBot!\n"
            "–Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è.\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞:"
        )
        await self._ask_question(message, Form.profession)

    async def _ask_question(self, message: types.Message, state: State):
        await state.set()
        await message.answer(self._QUESTIONS[state.state.split(":")[1]])

    async def process_answer(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–≤–∏–≥–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–∞–ª—å—à–µ"""
        current_state_full = await state.get_state()  # –Ω–∞–ø—Ä. 'Form:profession'
        if not current_state_full:
            return

        state_name = current_state_full.split(":")[1]
        async with state.proxy() as data:
            data[state_name] = message.text.strip()

        # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            idx = self._STATE_ORDER.index(state_name)
            next_state_name = self._STATE_ORDER[idx + 1] if idx + 1 < len(self._STATE_ORDER) else None
        except ValueError:
            next_state_name = None

        if next_state_name:
            await self._ask_question(message, getattr(Form, next_state_name))
        else:
            await self._generate_and_send_roadmap(message, state)

    # ‚îÄ‚îÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–æ–∞–¥–º–∞–ø–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
    async def _generate_and_send_roadmap(self, message: types.Message, state: FSMContext):
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –∑–∞–π–º–µ—Ç 1‚Äë2 –º–∏–Ω—É—Ç—ã")

        try:
            user_data = await state.get_data()
            base_prompt = YandexGPTClient._build_prompt(user_data)

            yandex_resp, hyperbolic_resp = await asyncio.gather(
                self.yandex_client.generate_roadmap(user_data),
                self.hyperbolic_client.generate_analysis(
                    f"–î–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {base_prompt}"
                ),
            )

            await message.answer(self._format_responses(yandex_resp, hyperbolic_resp), parse_mode="Markdown")
        except Exception as exc:  # noqa: BLE001
            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %s", exc, exc_info=True)
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–æ–∞–¥–º–∞–ø–∞")
        finally:
            with suppress(Exception):
                await state.finish()
                await message.answer(
                    "‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start"
                )

    @staticmethod
    def _format_responses(yandex: Optional[str], hyperbolic: Optional[str]) -> str:
        def safe(text: Optional[str], default: str) -> str:
            return text.strip() if text else default

        return (
            "üöÄ **–û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ–∞–¥–º–∞–ø –æ—Ç YandexGPT:**\n\n" + safe(yandex, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ–∞–¥–º–∞–ø") + "\n\n" +
            "üîç **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç Llama‚Äë3:**\n\n" + safe(hyperbolic, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        )

    # ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
    def run(self):
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞‚Ä¶")
        executor.start_polling(self.dp, skip_updates=True)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Entry point
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    cfg = Config()
    RoadmapGeneratorBot(cfg).run()


